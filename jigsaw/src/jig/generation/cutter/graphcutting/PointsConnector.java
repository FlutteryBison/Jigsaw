package jig.generation.cutter.graphcutting;

import java.awt.Point;

import delaunaytriangulation.Edge;
import shape.EdgePolygon;

/**
 * Classes implementing this interface must, in some way, connect points in a 2d plane to make complete polygons.
 * 
 */
public interface PointsConnector {
    /**
     * Connects all the points.
     * All edges must be a part of a complete polygon.
     * ie. a point cannot be an end point of exactly one edge, it must be a part of 0 edges or 2 or more edges.
     * 
     * There is no garuntee that all points will be included as part of a shape.
     * 
     * 
     */
    public void connectPoints();

    /**
     * Add another point.
     * @param point //The point to add.
     */
    public void addPoint(Point point);

    /**
     * Add an array of points
     * @param points //the points to add.
     */
    public void addPoints(Point[] points);

    /**
     * Sets the points the ones given. Any points currently being used will be removed.
     * @param points //The points to use.
     */
    public void setPoints(Point[] points);

    /**
     * Returns the edges generated from the most recent call to connect points
     * @return //Edges generated by connect points.
     */
    public Edge[] getEdges();

    /**
     * Returns the shapes generated from the most recent call to connect points.
     * The returned shape is an Edge Polgon made up of all the edges in the shape.
     * @return //Shapes generated by connect points
     */
    public EdgePolygon[] getShapes();


 
}
